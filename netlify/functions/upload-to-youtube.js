// Real YouTube upload using multipart form data
const boundary = '-------314159265358979323846';
const delimiter = `\r\n--${boundary}\r\n`;
const close_delim = `\r\n--${boundary}--`;

const metadata = {
  snippet: {
    title: clip.title || `${clip.game} Gaming Highlight`,
    description: `ðŸŽ® Epic ${clip.game} gameplay!\n\nAI Score: ${Math.round(clip.ai_score * 100)}%\nDuration: ${clip.duration}s\n\nðŸ¤– Auto-generated by AutoStreamPro`,
    tags: [clip.game, 'gaming', 'highlights'],
    categoryId: '20'
  },
  status: {
    privacyStatus: 'public',
    selfDeclaredMadeForKids: false
  }
};

const uploadUrl = 'https://www.googleapis.com/upload/youtube/v3/videos?uploadType=multipart&part=snippet,status';

// Get video file
const videoResponse = await fetch(clip.video_url);
const videoBuffer = await videoResponse.arrayBuffer();

// Create multipart body
const metadataBody = delimiter + 'Content-Type: application/json\r\n\r\n' + JSON.stringify(metadata);
const videoBody = delimiter + 'Content-Type: video/mp4\r\n\r\n';

const combined = new Uint8Array(
  new TextEncoder().encode(metadataBody).length +
  new TextEncoder().encode(videoBody).length +
  videoBuffer.byteLength +
  new TextEncoder().encode(close_delim).length
);

let offset = 0;
const metadataBytes = new TextEncoder().encode(metadataBody);
combined.set(metadataBytes, offset);
offset += metadataBytes.length;

const videoHeaderBytes = new TextEncoder().encode(videoBody);
combined.set(videoHeaderBytes, offset);
offset += videoHeaderBytes.length;

combined.set(new Uint8Array(videoBuffer), offset);
offset += videoBuffer.byteLength;

const closeBytes = new TextEncoder().encode(close_delim);
combined.set(closeBytes, offset);

// Upload to YouTube
const uploadResponse = await fetch(uploadUrl, {
  method: 'POST',
  headers: {
    'Authorization': `Bearer ${connection.access_token}`,
    'Content-Type': `multipart/related; boundary="${boundary}"`
  },
  body: combined
});

if (!uploadResponse.ok) {
  const errorText = await uploadResponse.text();
  throw new Error(`YouTube upload failed: ${uploadResponse.status} - ${errorText}`);
}

const result = await uploadResponse.json();
const youtubeVideoId = result.id; // Real YouTube video ID!
